// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouteDAl.Data.Contexts;

#nullable disable

namespace EvenDAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020195401_AddPdfVerifications")]
    partial class AddPdfVerifications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EvenDAL.Models.Classes.AgendaItem", b =>
                {
                    b.Property<Guid>("AgendaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("PresenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresVoting")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AgendaItemId");

                    b.HasIndex("PresenterId");

                    b.HasIndex("Type");

                    b.HasIndex("EventId", "OrderIndex");

                    b.ToTable("AgendaItems");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AppModule", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RequiredFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AppModules");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttachmentId");

                    b.HasIndex("SectionId");

                    b.HasIndex("Type");

                    b.HasIndex("EventId", "Order");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AttendanceLog", b =>
                {
                    b.Property<Guid>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttendanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendanceId");

                    b.HasIndex("AttendanceType");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId", "JoinTime");

                    b.ToTable("AttendanceLogs");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetaJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.HasIndex("ActorId");

                    b.HasIndex("At");

                    b.HasIndex("Entity", "EntityId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Decision", b =>
                {
                    b.Property<Guid>("DecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("DecisionId");

                    b.HasIndex("SectionId", "Order");

                    b.ToTable("Decisions", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DecisionItem", b =>
                {
                    b.Property<Guid>("DecisionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DecisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DecisionItemId");

                    b.HasIndex("DecisionId", "Order");

                    b.ToTable("DecisionItems", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Discussion", b =>
                {
                    b.Property<Guid>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("EventId", "Order");

                    b.ToTable("Discussions", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DiscussionPost", b =>
                {
                    b.Property<Guid>("DiscussionPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscussionPostId");

                    b.HasIndex("EventId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionPosts");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DiscussionReply", b =>
                {
                    b.Property<Guid>("DiscussionReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscussionReplyId");

                    b.HasIndex("UserId");

                    b.HasIndex("DiscussionId", "CreatedAt");

                    b.ToTable("DiscussionReplies", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendaItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("AgendaItemId");

                    b.HasIndex("EventId");

                    b.HasIndex("FileType");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppModuleModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequireSignature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("AppModuleModuleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EndAt");

                    b.HasIndex("StartAt");

                    b.HasIndex("Status");

                    b.HasIndex("OrganizationId", "Status");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.EventParticipant", b =>
                {
                    b.Property<Guid>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvitedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Invited");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventParticipantId");

                    b.HasIndex("Role");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.EventPublicLink", b =>
                {
                    b.Property<Guid>("EventPublicLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EventPublicLinkId");

                    b.HasIndex("EventId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("EventPublicLinks");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Localization", b =>
                {
                    b.Property<Guid>("LocalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalizationId");

                    b.HasIndex("OrganizationId", "Key", "Language")
                        .IsUnique();

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LicenseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("IsActive");

                    b.HasIndex("LicenseKey");

                    b.HasIndex("Name");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrganizationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LicenseExpiry = new DateTime(2030, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            LicenseKey = "MINA-SEED-2025",
                            Logo = "",
                            Name = "بدون مجموعة",
                            NameEn = "Ungrouped",
                            PrimaryColor = "#0d6efd",
                            SecondaryColor = "#6c757d",
                            Settings = "{}",
                            Type = "Other"
                        });
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.PdfVerification", b =>
                {
                    b.Property<Guid>("PdfVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExportedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PdfType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VerificationUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("PdfVerificationId");

                    b.HasIndex("PdfVerificationId")
                        .IsUnique();

                    b.ToTable("PdfVerifications");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.PlatformAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("PlatformAdmins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@mina.local",
                            FullName = "مدير النظام",
                            IsActive = true,
                            Phone = "0500000001",
                            ProfilePicture = ""
                        });
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Proposal", b =>
                {
                    b.Property<Guid>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProposalId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.ProposalUpvote", b =>
                {
                    b.Property<Guid>("ProposalUpvoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProposalUpvoteId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("ProposalUpvotes");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.PublicEventGuest", b =>
                {
                    b.Property<Guid>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UniqueToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GuestId");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("PublicEventGuests");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SectionId");

                    b.HasIndex("EventId", "Order");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Survey", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SurveyId");

                    b.HasIndex("SectionId");

                    b.HasIndex("EventId", "Order");

                    b.ToTable("Surveys", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyAnswer", b =>
                {
                    b.Property<Guid>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.HasIndex("QuestionId", "UserId")
                        .IsUnique();

                    b.ToTable("SurveyAnswers", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyAnswerOption", b =>
                {
                    b.Property<Guid>("SurveyAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SurveyAnswerId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("SurveyAnswerOptions", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyOption", b =>
                {
                    b.Property<Guid>("SurveyOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SurveyOptionId");

                    b.HasIndex("QuestionId", "Order");

                    b.ToTable("SurveyOptions", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyQuestion", b =>
                {
                    b.Property<Guid>("SurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex("SurveyId", "Order");

                    b.ToTable("SurveyQuestions", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.TableBlock", b =>
                {
                    b.Property<Guid>("TableBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasHeader")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RowsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TableBlockId");

                    b.HasIndex("SectionId");

                    b.HasIndex("EventId", "Order");

                    b.ToTable("TableBlocks", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.HasIndex("OrganizationId", "Email")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@mina.local",
                            FullName = "مستخدم تجريبي",
                            IsActive = true,
                            OrganizationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Phone = "0500000000",
                            ProfilePicture = "",
                            Role = "Attendee"
                        });
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.UserHiddenEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("HiddenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserHiddenEvents");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.UserSignature", b =>
                {
                    b.Property<Guid>("UserSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserSignatureId");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("UserSignatures", (string)null);
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomAnswer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VotedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid?>("VotingOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("VotedAt");

                    b.HasIndex("VotingOptionId");

                    b.HasIndex("VotingSessionId", "UserId")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingOption", b =>
                {
                    b.Property<Guid>("VotingOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VotingOptionId");

                    b.HasIndex("VotingSessionId", "OrderIndex");

                    b.ToTable("VotingOptions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingSession", b =>
                {
                    b.Property<Guid>("VotingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendaItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VotingSessionId");

                    b.HasIndex("AgendaItemId");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.HasIndex("EventId", "StartTime");

                    b.ToTable("VotingSessions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AgendaItem", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("AgendaItems")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "Presenter")
                        .WithMany("PresentedItems")
                        .HasForeignKey("PresenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Presenter");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Attachment", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Attachments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.Section", "Section")
                        .WithMany("Attachments")
                        .HasForeignKey("SectionId");

                    b.Navigation("Event");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AttendanceLog", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("AttendanceLogs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("AttendanceLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Decision", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Section", "Section")
                        .WithMany("Decisions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DecisionItem", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Decision", "Decision")
                        .WithMany("Items")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decision");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Discussion", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Discussions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.Section", "Section")
                        .WithMany("Discussions")
                        .HasForeignKey("SectionId");

                    b.Navigation("Event");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DiscussionPost", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.DiscussionPost", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DiscussionReply", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Discussion", "Discussion")
                        .WithMany("Replies")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Document", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.AgendaItem", "AgendaItem")
                        .WithMany("Documents")
                        .HasForeignKey("AgendaItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Documents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "UploadedBy")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgendaItem");

                    b.Navigation("Event");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Event", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.AppModule", null)
                        .WithMany("Events")
                        .HasForeignKey("AppModuleModuleId");

                    b.HasOne("EvenDAL.Models.Classes.User", "CreatedBy")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.Organization", "Organization")
                        .WithMany("Events")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.EventParticipant", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.EventPublicLink", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Localization", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Organization", "Organization")
                        .WithMany("Localizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Notification", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Proposal", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.ProposalUpvote", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Proposal", "Proposal")
                        .WithMany("UpvoteList")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.PublicEventGuest", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Section", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Sections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Survey", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("Surveys")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.Section", "Section")
                        .WithMany("Surveys")
                        .HasForeignKey("SectionId");

                    b.Navigation("Event");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyAnswer", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.SurveyQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyAnswerOption", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.SurveyOption", "Option")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.SurveyAnswer", "Answer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyOption", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.SurveyQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyQuestion", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.TableBlock", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("TableBlocks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.Section", "Section")
                        .WithMany("Tables")
                        .HasForeignKey("SectionId");

                    b.Navigation("Event");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.User", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.UserHiddenEvent", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.UserSignature", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("UserSignatures")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("Signatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Vote", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvenDAL.Models.Classes.VotingOption", "VotingOption")
                        .WithMany("Votes")
                        .HasForeignKey("VotingOptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EvenDAL.Models.Classes.VotingSession", "VotingSession")
                        .WithMany("Votes")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VotingOption");

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingOption", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.VotingSession", "VotingSession")
                        .WithMany("VotingOptions")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingSession", b =>
                {
                    b.HasOne("EvenDAL.Models.Classes.AgendaItem", "AgendaItem")
                        .WithMany("VotingSessions")
                        .HasForeignKey("AgendaItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EvenDAL.Models.Classes.Event", "Event")
                        .WithMany("VotingSessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgendaItem");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AgendaItem", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("VotingSessions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.AppModule", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Decision", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Discussion", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.DiscussionPost", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Event", b =>
                {
                    b.Navigation("AgendaItems");

                    b.Navigation("Attachments");

                    b.Navigation("AttendanceLogs");

                    b.Navigation("Discussions");

                    b.Navigation("Documents");

                    b.Navigation("Notifications");

                    b.Navigation("Participants");

                    b.Navigation("Sections");

                    b.Navigation("SurveyAnswers");

                    b.Navigation("Surveys");

                    b.Navigation("TableBlocks");

                    b.Navigation("UserSignatures");

                    b.Navigation("VotingSessions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Organization", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Localizations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Proposal", b =>
                {
                    b.Navigation("UpvoteList");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Section", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Decisions");

                    b.Navigation("Discussions");

                    b.Navigation("Surveys");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyOption", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.SurveyQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.User", b =>
                {
                    b.Navigation("AttendanceLogs");

                    b.Navigation("CreatedEvents");

                    b.Navigation("DiscussionReplies");

                    b.Navigation("EventParticipants");

                    b.Navigation("Notifications");

                    b.Navigation("PresentedItems");

                    b.Navigation("Signatures");

                    b.Navigation("SurveyAnswers");

                    b.Navigation("UploadedDocuments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("EvenDAL.Models.Classes.VotingSession", b =>
                {
                    b.Navigation("Votes");

                    b.Navigation("VotingOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
