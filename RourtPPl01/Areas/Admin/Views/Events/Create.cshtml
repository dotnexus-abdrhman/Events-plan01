@model CreateEventViewModel
@{
    ViewData["Title"] = "إنشاء حدث جديد";
}

<div class="sticky-top bg-light-bg py-3 mb-4" style="top:0;z-index:100">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h2 class="mb-0"><i class="fas fa-calendar-plus me-2"></i>إنشاء حدث جديد</h2>
            <div class="d-flex align-items-center gap-2">
                <button type="button" class="btn btn-success" onclick="document.getElementById('createEventForm').requestSubmit();">
                    <i class="fas fa-save me-1"></i>حفظ
                </button>
                <button type="button" class="btn btn-outline-primary" disabled title="قم بالحفظ أولاً ثم أنشئ رابط المشاركة من صفحة التعديل">
                    <i class="fas fa-link me-1"></i>رابط مشاركة عام
                </button>
                <a href="/Admin/Events" class="btn btn-secondary">
                    <i class="fas fa-times me-1"></i>إلغاء
                </a>
            </div>
        </div>
    </div>
</div>

<form id="createEventForm" method="post" asp-area="Admin" asp-controller="Events" asp-action="Create" enctype="multipart/form-data" novalidate>
    @Html.AntiForgeryToken()

    <input type="hidden" id="BuilderJson" name="BuilderJson" />
    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-info-circle me-2"></i>المعلومات الأساسية
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-12">
                    <label class="form-label">عنوان الحدث <span class="text-danger">*</span></label>
                    <input asp-for="Title" class="form-control" placeholder="أدخل عنوان الحدث">
                    <span asp-validation-for="Title" class="text-danger small"></span>
                </div>

                <div class="col-md-12">
                    <label class="form-label">الوصف <span class="text-danger">*</span></label>
                    <textarea asp-for="Description" class="form-control" rows="4" placeholder="أدخل وصف الحدث"></textarea>
                    <span asp-validation-for="Description" class="text-danger small"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="OrganizationId" class="form-label">الجهة <span class="text-danger">*</span></label>
                    <select asp-for="OrganizationId" asp-items="Model.Organizations" class="form-select">
                        <option value="">-- اختر الجهة --</option>
                    </select>
                    <span asp-validation-for="OrganizationId" class="text-danger small"></span>
                </div>


                <div class="col-md-6">
                    <label class="form-label">تاريخ البدء <span class="text-danger">*</span></label>
                    <input asp-for="StartAt" type="datetime-local" class="form-control" asp-format="{0:yyyy-MM-ddTHH:mm}">
                    <span asp-validation-for="StartAt" class="text-danger small"></span>
                </div>

                <div class="col-md-6">
                    <label class="form-label">تاريخ الانتهاء <span class="text-danger">*</span></label>
                    <input asp-for="EndAt" type="datetime-local" class="form-control" asp-format="{0:yyyy-MM-ddTHH:mm}">
                    <span asp-validation-for="EndAt" class="text-danger small"></span>
                </div>

                <div class="col-md-6">
                    <label class="form-label">الحالة</label>
                    <select asp-for="Status" class="form-select">
                        <option value="1">مسودة</option>
                        <option value="2">نشط</option>
                        <option value="3">مكتمل</option>
                        <option value="4">ملغي</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <div class="form-check mt-4">
                        <input asp-for="RequireSignature" class="form-check-input" type="checkbox">
                        <label asp-for="RequireSignature" class="form-check-label">
                            يتطلب توقيع المستخدم
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="fas fa-list me-2"></i>البنود والقرارات</span>
            <button type="button" class="btn btn-sm btn-primary" onclick="addSection()">
                <i class="fas fa-plus me-1"></i>إضافة بند
            </button>
        </div>
        <div class="card-body">
            <div id="sectionsContainer">
                <p class="text-muted text-center">لا توجد بنود. اضغط "إضافة بند" للبدء.</p>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="fas fa-puzzle-piece me-2"></i>المكونات العامة</span>
            <div class="dropdown">
                <button class="btn btn-sm btn-success dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-auto-close="outside">
                    <i class="fas fa-plus me-1"></i>إضافة مكوّن
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" onclick="addSurvey();return false;">
                        <i class="fas fa-poll me-2"></i>استبيان
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="addDiscussion();return false;">
                        <i class="fas fa-comments me-2"></i>نقاش
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="addTable();return false;">
                        <i class="fas fa-table me-2"></i>جدول
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" onclick="return openFilePickerById('imageUpload', event);">
                        <i class="fas fa-image me-2"></i>صورة
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="return openFilePickerById('pdfUpload', event);">
                        <i class="fas fa-file-pdf me-2"></i>PDF
                    </a></li>
                </ul>
            </div>
        </div>
        <div class="card-body">
            <div id="componentsContainer">
                <p class="text-muted text-center">لا توجد مكونات. اضغط "إضافة مكوّن" للبدء.</p>
            </div>

            <input type="file" id="imageUpload" accept="image/*" multiple style="position:absolute;left:-9999px;width:1px;height:1px;opacity:0;" onchange="handleImageUpload(this)">
            <input type="file" id="pdfUpload" accept=".pdf" multiple style="position:absolute;left:-9999px;width:1px;height:1px;opacity:0;" onchange="handlePdfUpload(this)">
        </div>
    </div>

    <div class="sticky-bottom bg-light-bg py-3 text-center" style="bottom:0">
        <button type="submit" class="btn btn-success btn-lg me-2">
            <i class="fas fa-save me-2"></i>حفظ الحدث
        </button>
        <a href="/Admin/Events" class="btn btn-secondary btn-lg">
            <i class="fas fa-times me-2"></i>إلغاء
        </a>
    </div>
</form>

@section Scripts {
    <script>
        function openFilePickerById(id, ev){
            if (ev){ ev.preventDefault(); ev.stopPropagation(); }
            setTimeout(() => {
                const input = document.getElementById(id);
                if (!input) return false;
                try { input.click(); } catch {}
            }, 0);
            return false;
        }
        (function(){
            const form = document.getElementById('createEventForm');
            if (!form) return;
            form.addEventListener('submit', function(){
                try {
                    const payload = collectBuilderPayload();
                    const hidden = document.getElementById('BuilderJson');
                    if (hidden) hidden.value = JSON.stringify(payload);
                } catch (err) {
                    console.error('Builder payload error:', err);
                }
            });

            function collectBuilderPayload() {
                const sections = [];
                document.querySelectorAll('#sectionsContainer .section-item').forEach(sec => {
                    const title = sec.querySelector('input[name$=".Title"]')?.value?.trim() || '';
                    const body = sec.querySelector('textarea[name$=".Body"]')?.value?.trim() || '';
                    const decisions = [];
                    sec.querySelectorAll('.decision-item').forEach(dec => {
                        const dTitle = dec.querySelector('input')?.value?.trim() || '';
                        const items = [];
                        dec.querySelectorAll('.decision-items .input-group input').forEach(inp => {
                            const v = inp.value?.trim();
                            if (v) items.push(v);
                        });
                        if (dTitle) decisions.push({ title: dTitle, items });
                    });
                    if (title) {
                        // Collect section-level components if any
                        const secId = parseInt(sec.getAttribute('data-section-id') || '0');
                        const cont = document.getElementById(`sec-components-${secId}`);
                        const surveys = [];
                        const discussions = [];
                        const tables = [];
                        const images = [];
                        const pdfs = [];
                        if (cont) {
                            // Surveys with questions/options
                            cont.querySelectorAll('.component-item[data-type="survey"]').forEach(sv => {
                                const stitle = sv.querySelector('input')?.value?.trim() || '';
                                const sdesc = sv.querySelector('textarea')?.value?.trim() || '';
                                const questions = [];
                                sv.querySelectorAll('[data-sec-question-id]').forEach(q => {
                                    const text = q.querySelector('input')?.value?.trim() || '';
                                    const typeVal = parseInt(q.querySelector('select')?.value || '0');
                                    const options = [];
                                    q.querySelectorAll('.options-container input').forEach(opt => {
                                        const v = opt.value?.trim();
                                        if (v) options.push(v);
                                    });
                                    if (text) questions.push({ text, type: isNaN(typeVal) ? 0 : typeVal, options });
                                });
                                if (stitle) surveys.push({ title: stitle, description: sdesc, questions });
                            });
                            // Discussions
                            cont.querySelectorAll('.component-item[data-type="discussion"]').forEach(d => {
                                const t = d.querySelector('input')?.value?.trim() || '';
                                const p = d.querySelector('textarea')?.value?.trim() || '';
                                if (t) discussions.push({ title: t, purpose: p });
                            });
                            // Tables with preview rows
                            cont.querySelectorAll('.component-item[data-type="table"]').forEach(tb => {
                                const t = tb.querySelector('input')?.value?.trim() || '';
                                let rows = [];
                                const previewTable = tb.querySelector(`div[id^="sec-${secId}-table-preview-"] table`);
                                if (previewTable) {
                                    previewTable.querySelectorAll('tbody tr').forEach(tr => {
                                        const row = [];
                                        tr.querySelectorAll('td').forEach(td => {
                                            row.push({ value: (td.innerText || '').trim() });
                                        });
                                        rows.push(row);
                                    });
                                }
                                const rowsJson = JSON.stringify({ rows });
                                if (t) tables.push({ title: t, rowsJson });
                            });
                            // Attachments
                            cont.querySelectorAll('.component-item[data-type="image"] input[type="hidden"]').forEach(h => { if (h.value) images.push(h.value); });
                            cont.querySelectorAll('.component-item[data-type="pdf"] input[type="hidden"]').forEach(h => { if (h.value) pdfs.push(h.value); });
                        }
                        sections.push({ title, body, decisions, surveys, discussions, tables, images, pdfs });
                    }
                });

                const surveys = [];
                document.querySelectorAll('#componentsContainer .component-item[data-type="survey"]').forEach(sv => {
                    const title = sv.querySelector('input[name*="Surveys"]')?.value?.trim() || '';
                    const questions = [];
                    sv.querySelectorAll('[data-question-id]').forEach(q => {
                        const text = q.querySelector('input')?.value?.trim() || '';
                        const typeVal = parseInt(q.querySelector('select')?.value || '0');
                        const options = [];
                        q.querySelectorAll('.options-container input').forEach(opt => {
                            const v = opt.value?.trim();
                            if (v) options.push(v);
                        });
                        if (text) questions.push({ text, type: isNaN(typeVal) ? 0 : typeVal, options });
                    });
                    if (title) surveys.push({ title, questions });
                });

                const discussions = [];
                document.querySelectorAll('#componentsContainer .component-item[data-type="discussion"]').forEach(d => {
                    const title = d.querySelector('input')?.value?.trim() || '';
                    const purpose = d.querySelector('textarea')?.value?.trim() || '';
                    if (title) discussions.push({ title, purpose });
                });

                const tables = [];
                document.querySelectorAll('#componentsContainer .component-item[data-type="table"]').forEach(t => {
                    const title = t.querySelector('input[name*="Tables"]')?.value?.trim() || '';
                    // Rebuild current cell values from the preview table to persist user-edited content
                    const previewTable = t.querySelector('div[id^="table-preview-"] table');
                    let rows = [];
                    if (previewTable) {
                        previewTable.querySelectorAll('tbody tr').forEach(tr => {
                            const row = [];
                            tr.querySelectorAll('td').forEach(td => {
                                row.push({ value: (td.innerText || '').trim() });
                            });
                            rows.push(row);
                        });
                    }
                    const rowsJson = JSON.stringify({ rows });
                    if (title) tables.push({ title, rowsJson });
                });

                const images = [];
                document.querySelectorAll('#componentsContainer .component-item[data-type="image"] input[type="hidden"]').forEach(h => {
                    if (h.value) images.push(h.value);
                });
                const pdfs = [];
                document.querySelectorAll('#componentsContainer .component-item[data-type="pdf"] input[type="hidden"]').forEach(h => {
                    if (h.value) pdfs.push(h.value);
                });

                return { sections, surveys, discussions, tables, images, pdfs };
            }
        })();
    </script>
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/event-builder.js"></script>
}

